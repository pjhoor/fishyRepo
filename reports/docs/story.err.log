Traceback (most recent call last):
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/pjhoor/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
developed_countries = [
    "Australia",
    "Austria",
    "Belgium",
    "Canada",
    "Denmark",
    "Finland",
    "France",
    "Germany",
    "Iceland",
    "Ireland",
    "Israel",
    "Italy",
    "Japan",
    "Luxembourg",
    "Netherlands",
    "New Zealand",
    "Norway",
    "Portugal",
    "Singapore",
    "South Korea",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Andorra",
    "Cyprus",
    "Czech Republic",
    "Estonia",
    "Greece",
    "Hong Kong SAR",
    "Latvia",
    "Lithuania",
    "Malta",
    "Monaco",
    "San Marino",
    "Slovakia",
    "Slovenia"
]
df = pd.read_csv("../graphs/merged_to_csv")
countries = pd.read_csv('../datasets/sus.csv')['Entity'].drop_duplicates()
world_data = df[(df['Element'] == "Emissions (CO2)") & (df['Item'] == "All sectors without LULUCF") & (df['Area'].isin(countries))].drop(columns=['Item', 'Element', 'Unit', 'Entity', 'Access to electricity (% of population)', 'Access to clean fuels for cooking', 'Renewable-electricity-generating-capacity-per-capita', 'Financial flows to developing countries (US $)', 'Financial flows to developing countries (US $)', 'Electricity from fossil fuels (TWh)', 'Electricity from nuclear (TWh)', 'Electricity from renewables (TWh)','Low-carbon electricity (% electricity)', 'Primary energy consumption per capita (kWh/person)', 'Energy intensity level of primary energy (MJ/$2017 PPP GDP)', 'Value_co2_emissions_kt_by_country', 'Renewables (% equivalent primary energy)','gdp_growth', 'gdp_per_capita', 'Density\\n(P/Km2)','Land Area(Km2)', 'Latitude', 'Longitude']).dropna()

means = pd.concat([world_data['Renewable energy share in the total final energy consumption (%)'].groupby(world_data['Year']).mean(), world_data['Emission'].groupby(world_data['Year']).sum()], axis=1)
means
"""import plotly.express as px
import plotly.graph_objects as go
"""
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Create figure with secondary y-axis
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add traces
fig.add_trace(
    go.Scatter(x=means.index, y=means['Emission'], name="Emissions"),
    secondary_y=False,
)

fig.add_trace(
    go.Scatter(x=means.index, y=means['Renewable energy share in the total final energy consumption (%)'], name="Renewable energy share (%)"),
    secondary_y=True,
)

# Add figure title
fig.update_layout(
    title_text="World average"
)

# Set x-axis title
fig.update_xaxes(title_text="Year")

# Set y-axes titles
fig.update_yaxes(title_text="<b>Emissions</b>", secondary_y=False)
fig.update_yaxes(title_text="<b>Renewable energy share (%)</b>", secondary_y=True)

fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[9], line 41[0m
[1;32m      1[0m developed_countries [38;5;241m=[39m [
[1;32m      2[0m     [38;5;124m"[39m[38;5;124mAustralia[39m[38;5;124m"[39m,
[1;32m      3[0m     [38;5;124m"[39m[38;5;124mAustria[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m     39[0m     [38;5;124m"[39m[38;5;124mSlovenia[39m[38;5;124m"[39m
[1;32m     40[0m ]
[0;32m---> 41[0m df [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mread_csv[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m../graphs/merged_to_csv[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     42[0m countries [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124m../datasets/sus.csv[39m[38;5;124m'[39m)[[38;5;124m'[39m[38;5;124mEntity[39m[38;5;124m'[39m][38;5;241m.[39mdrop_duplicates()
[1;32m     43[0m world_data [38;5;241m=[39m df[(df[[38;5;124m'[39m[38;5;124mElement[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;124m"[39m[38;5;124mEmissions (CO2)[39m[38;5;124m"[39m) [38;5;241m&[39m (df[[38;5;124m'[39m[38;5;124mItem[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;124m"[39m[38;5;124mAll sectors without LULUCF[39m[38;5;124m"[39m) [38;5;241m&[39m (df[[38;5;124m'[39m[38;5;124mArea[39m[38;5;124m'[39m][38;5;241m.[39misin(countries))][38;5;241m.[39mdrop(columns[38;5;241m=[39m[[38;5;124m'[39m[38;5;124mItem[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mElement[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mUnit[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mEntity[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mAccess to electricity ([39m[38;5;132;01m% o[39;00m[38;5;124mf population)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mAccess to clean fuels for cooking[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mRenewable-electricity-generating-capacity-per-capita[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mFinancial flows to developing countries (US $)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mFinancial flows to developing countries (US $)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mElectricity from fossil fuels (TWh)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mElectricity from nuclear (TWh)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mElectricity from renewables (TWh)[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mLow-carbon electricity ([39m[38;5;132;01m% e[39;00m[38;5;124mlectricity)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mPrimary energy consumption per capita (kWh/person)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mEnergy intensity level of primary energy (MJ/$2017 PPP GDP)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mValue_co2_emissions_kt_by_country[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mRenewables ([39m[38;5;132;01m% e[39;00m[38;5;124mquivalent primary energy)[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mgdp_growth[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mgdp_per_capita[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mDensity[39m[38;5;130;01m\\[39;00m[38;5;124mn(P/Km2)[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mLand Area(Km2)[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mLatitude[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mLongitude[39m[38;5;124m'[39m])[38;5;241m.[39mdropna()

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mengine[49m[43m)[49m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m [43mget_handle[49m[43m([49m
[1;32m   1881[0m [43m    [49m[43mf[49m[43m,[49m
[1;32m   1882[0m [43m    [49m[43mmode[49m[43m,[49m
[1;32m   1883[0m [43m    [49m[43mencoding[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1884[0m [43m    [49m[43mcompression[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mcompression[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1885[0m [43m    [49m[43mmemory_map[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mmemory_map[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[1;32m   1886[0m [43m    [49m[43mis_text[49m[38;5;241;43m=[39;49m[43mis_text[49m[43m,[49m
[1;32m   1887[0m [43m    [49m[43merrors[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding_errors[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mstrict[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m,[49m
[1;32m   1888[0m [43m    [49m[43mstorage_options[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mstorage_options[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1889[0m [43m[49m[43m)[49m
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28;43mopen[39;49m[43m([49m
[1;32m    874[0m [43m            [49m[43mhandle[49m[43m,[49m
[1;32m    875[0m [43m            [49m[43mioargs[49m[38;5;241;43m.[39;49m[43mmode[49m[43m,[49m
[1;32m    876[0m [43m            [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mioargs[49m[38;5;241;43m.[39;49m[43mencoding[49m[43m,[49m
[1;32m    877[0m [43m            [49m[43merrors[49m[38;5;241;43m=[39;49m[43merrors[49m[43m,[49m
[1;32m    878[0m [43m            [49m[43mnewline[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    879[0m [43m        [49m[43m)[49m
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '../graphs/merged_to_csv'

